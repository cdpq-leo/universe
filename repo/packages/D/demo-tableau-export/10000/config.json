{
    "type": "object",
    "properties": {
        "service": {
            "type": "object",
            "description": "DC/OS service specifications of YOUR APP",
            "properties": {
                "name": {
                    "description": "Name of application instance as seen in DC/OS.",
                    "type": "string",
                    "default": "demo-article-viewer"
                },
                "cpus": {
                    "description": "Number of logical cores to allocate to each service instance.",
                    "type": "number",
                    "default": 0.3
                },
                "gpus": {
                    "description": "Number of GPUS to allocate to each service instance.",
                    "type": "number",
                    "default": 0
                },
                "mem": {
                    "description": "Memory in Mb to allocate to each service instance.",
                    "type": "number",
                    "default": 2048
                },
                "disk": {
                    "description": "Number of disks to allocate to each service instance.",
                    "type": "number",
                    "default": 0
                },
                "instances": {
                    "description": "Number of instances of your service.",
                    "type": "number",
                    "default": 1.0
                },
                "back_off_seconds": {
                    "description": "The amount of time (in seconds) before Marathon retries launching a failed task.",
                    "type": "number",
                    "default": 1.0
                },
                "back_off_factor": {
                    "description": "The multiplicand to apply to the backoffSeconds value.",
                    "type": "number",
                    "default": 1.15
                },
                "max_launch_delay_seconds": {
                    "description": "The maximum amount of time (in seconds) to wait, after applying the backoffSeconds and backoffFactor values, before attempting to restart failed tasks.",
                    "type": "number",
                    "default": 3600
                }
            }
        },
        "placement": {
            "type": "object",
            "description": "Constraints control where apps run to allow optimizing for either fault tolerance (by spreading a task out on multiple nodes) or locality (by running all of an applications tasks on the same node).",
            "properties": {
                "constraints": {
                    "type": "string",
                    "description": "Constraints have three parts: a field name, an operator, and an optional parameter. The field can be the hostname of the agent node or any attribute of the agent node. Example: [[\"rack_id\", \"LIKE\", \"rack-foo-.*\"], [\"rack_id\", \"MAX_PER\", \"2\"]]",
                    "default": "[[\"privatenodetype\", \"CLUSTER\", \"stateless\"], [\"application\", \"CLUSTER\", \"true\"]]",
                    "media": {
                        "type": "application/x-zone-constraints+json"
                    }
                }
            }
        },
        "networking": {
            "type": "object",
            "description": "Configure the networking for your service.",
            "properties": {
                "container_port": {
                    "description": "Container port number",
                    "type": "number",
                    "default": 8080
                },
                "service_port": {
                    "description": "Service port number",
                    "type": "number",
                    "default": 10109
                },
                "host_port": {
                    "description": "Host port number",
                    "type": "number",
                    "default": 0
                },
                "name": {
                    "type": "string",
                    "default": "default"
                }
            }
        },
        "volumes": {
            "description": "Create a stateful service by configuring a persistent volume. Persistent volumes enable instances to be restarted without data loss.",
            "type": "object",
            "properties": {
                "data_host_volume": {
                    "type": "object",
                    "description": "A host volume is a directory on the local agent mapped to one in a container.",
                    "properties": {
                        "host_path": {
                            "type": "string",
                            "default": "/mnt/azurefileshare/hdfs/data/kb/demo"
                        },
                        "container_path": {
                            "type": "string",
                            "default": "/data"
                        },
                        "mode": {
                            "type": "string",
                            "default": "RW",
                            "enum": [
                                "RW",
                                "RO"
                            ]
                        }
                    }
                }
            }
        },
        "environment": {
            "type": "object",
            "properties": {
                "VIEWER_URL": {
                    "type": "string",
                    "default": "http://dcos-leo.eastus.cloudapp.azure.com/service/demo-article-viewer"
                },
                "MARKLOGIC_USERNAME": {
                    "type": "string",
                    "default": "admin"
                },
                "MARKLOGIC_PASSWORD": {
                    "type": "string",
                    "default": "Cdpq@1234567"
                },
                "MARKLOGIC_URL": {
                    "type": "string",
                    "default": "http://marklogic.marathon.l4lb.thisdcos.directory:8000"
                },
                "KAFKA_BOOTSTRAP_SERVERS": {
                    "type": "string",
                    "default": "broker.kafka.l4lb.thisdcos.directory:9092"
                },
                "MARKLOGIC_DB": {
                    "type": "string",
                    "default": "KnowledgeBase-Dev"
                },
                "KAFKA_CONSUMER_TOPIC": {
                    "type": "string",
                    "default": "streaming.kb.demo"
                }
            }
        }
    }
}