{
  "id": "{{service.name}}",
  "instances": {{service.instances}},
  "cpus": {{service.cpus}},
  "mem": {{service.mem}},
  "disk": {{service.disk}},
  {{#service.cmd}}
  "cmd": "{{service.cmd}}",
  {{/service.cmd}}
  "backoffSeconds": {{service.back_off_seconds}},
  "backoffFactor": {{service.back_off_factor}},
  "maxLaunchDelaySeconds": {{service.max_launch_delay_seconds}},
  "networks": [
    {
      "mode": "container/bridge"
    }
  ],
  "acceptedResourceRoles": [
    "*"
  ],
  "container": {
    "type": "MESOS",
    "docker": {
      "image": "{{resource.assets.container.docker.image}}",
      "forcePullImage": true,
      "privileged": false,
      "parameters": []
    },
    "portMappings": [
      {
        {{#networking.service_endpoints.load_balance_port}}
        "labels": {
            "VIP_0": "/{{service.name}}:{{networking.service_endpoints.load_balance_port}}"
        },
        {{/networking.service_endpoints.load_balance_port}}
        "containerPort": {{networking.service_endpoints.container_port}},
        "hostPort": {{networking.service_endpoints.host_port}},
        {{#networking.service_endpoints.name}}
        "name": "{{networking.service_endpoints.name}}",
        {{/networking.service_endpoints.name}}
        "protocol": "{{networking.service_endpoints.protocol}}"
      }
    ],
    "volumes": []
  },
  "env": {
    "MONGO_HOSTS": "{environment.MONGO_HOSTS}",
    "MONGO_PORT": "{environment.MONGO_PORT}",
    "MONGO_USERNAME": {"secret": "mongodbuser"},
    "MONGO_PASSWORD": {"secret": "mongodbpassword"},
    "MONGO_DB": "{environment.MONGO_DB}",
    "MONGO_COLLECTION": "{environment.MONGO_COLLECTION}",
    "MONGO_REPLICA_SET": "{environment.MONGO_REPLICA_SET}",
    "MONGO_MOCK_MODE": "{environment.MONGO_MOCK_MODE}",
    "STATS_PERSIST_TYPE": "{environment.STATS_PERSIST_TYPE}"
    {{#placement.region}}
    "SERVICE_REGION": "{{placement.region}}",
    {{/placement.region}}
    {{#service.service_account_secret}}
    "DCOS_SERVICE_ACCOUNT_CREDENTIAL": {"secret": "serviceCredential"},
    "MESOS_MODULES": "{\"libraries\": [{\"file\": \"libdcos_security.so\", \"modules\": [{\"name\": \"com_mesosphere_dcos_ClassicRPCAuthenticatee\"}]}]}",
    "MESOS_AUTHENTICATEE": "com_mesosphere_dcos_ClassicRPCAuthenticatee"
    {{/service.service_account_secret}}
  },
  "secrets": {
    "mongodbuser": {
      "source": "{{environment.MONGO_USERNAME}}"
    },
    "mongodbpassword": {
      "source": "{{environment.MONGO_PASSWORD}}"
    },
    {{#service.service_account_secret}}
    "serviceCredential": {
      "source": "{{service.service_account_secret}}"
    }
    {{/service.service_account_secret}}
  },
  "labels": {
    {{#networking.marathon_lb_proxy.enabled}}
    "HAPROXY_GROUP": "external",
    "HAPROXY_0_ENABLED": "true",
    "HAPROXY_0_REDIRECT_TO_HTTPS": "true",
    "HAPROXY_0_VHOST": "{{networking.marathon_lb_proxy.vhost}}",
    {{#networking.marathon_lb_proxy.path}}
    "HAPROXY_0_PATH": "{{networking.marathon_lb_proxy.path}}",
    {{/networking.marathon_lb_proxy.path}}
    {{/networking.marathon_lb_proxy.enabled}}
    "DCOS_SERVICE_SCHEME": "http",
    "DCOS_SERVICE_NAME": "{{service.name}}",
    "DCOS_SERVICE_PORT_INDEX": "0"
  },
  "healthChecks": [
    {
      "protocol": "HTTP",
      "portIndex": {{health_checks.HTTP_protocol.port_index}},
      {{#networking.marathon_lb_proxy.enabled}}
      {{#networking.marathon_lb_proxy.path}}
      "path": "{{networking.marathon_lb_proxy.path}}/health",
      {{/networking.marathon_lb_proxy.path}}
      {{/networking.marathon_lb_proxy.enabled}}
      {{^networking.marathon_lb_proxy.enabled}}
      "path": "/health",
      {{/networking.marathon_lb_proxy.enabled}}
      "gracePeriodSeconds": {{health_checks.HTTP_protocol.advanced_health_checking_settings.grace_periods}},
      "intervalSeconds": {{health_checks.HTTP_protocol.advanced_health_checking_settings.intervals}},
      "timeoutSeconds": {{health_checks.HTTP_protocol.advanced_health_checking_settings.timeout}},
      "maxConsecutiveFailures": {{health_checks.HTTP_protocol.advanced_health_checking_settings.max_failures}},
      "delaySeconds": {{health_checks.HTTP_protocol.advanced_health_checking_settings.delay_seconds}}
    }
  ],
  "fetch": [
    {{#fetch.artifact_URI.uri}}
    {
      "uri": "{{fetch.artifact_URI.uri}}",
      "extract": {{fetch.artifact_URI.extract}},
      "executable": {{fetch.artifact_URI.executable}},
      "cache": {{fetch.artifact_URI.cache}}
    }
    {{/fetch.artifact_URI.uri}}
  ],
  "upgradeStrategy": {
    "maximumOverCapacity": 1,
    "minimumHealthCapacity": 1
  }
}
