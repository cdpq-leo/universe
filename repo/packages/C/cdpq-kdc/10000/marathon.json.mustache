{
  "id": "{{service.name}}",
  "instances": {{service.instances}},
  "cpus": {{service.cpus}},
  "mem": {{service.mem}},
  "disk": {{service.disk}},
  {{#service.cmd}}
  "cmd": "{{service.cmd}}",
  {{/service.cmd}}
  "backoffSeconds": {{service.back_off_seconds}},
  "backoffFactor": {{service.back_off_factor}},
  "maxLaunchDelaySeconds": {{service.max_launch_delay_seconds}},
  "networks": [
    {
      "mode": "host"
    }
  ],
  "acceptedResourceRoles": [
    "*"
  ],
  "portDefinitions": [
    {
      "labels": {
        "VIP_0": "/{{service.name}}:{{networking.service_endpoint.host_port}}"
      },
      {{#networking.service_endpoint.name}}
      "name": "{{networking.service_endpoint.name}}",
      {{/networking.service_endpoint.name}}
      "protocol": "{{networking.service_endpoint.protocol}}",
      "port": {{networking.service_endpoint.host_port}}
    },
    {
      {{#networking.service_web_endpoint.name}}
      "name": "{{networking.service_web_endpoint.name}}",
      {{/networking.service_web_endpoint.name}}
      "protocol": "{{networking.service_web_endpoint.protocol}}",
      "port": {{networking.service_web_endpoint.host_port}}
    }
  ],
  "container": {
    "type": "DOCKER",
    "docker": {
      "forcePullImage": true,
      "image": "{{resource.assets.container.docker.image}}",
      "parameters": [],
      "privileged": false
    }
  },
  "env": {
    {{#service.service_account_secret}}
    "DCOS_SERVICE_ACCOUNT_CREDENTIAL": {"secret": "serviceCredential"},
    "MESOS_MODULES": "{\"libraries\": [{\"file\": \"libdcos_security.so\", \"modules\": [{\"name\": \"com_mesosphere_dcos_ClassicRPCAuthenticatee\"}]}]}",
    "MESOS_AUTHENTICATEE": "com_mesosphere_dcos_ClassicRPCAuthenticatee",
    "SERVICE_ACCOUNT_SECRET": {"secret": "serviceCredential"}
    {{/service.service_account_secret}}
    {{#placement.region}}
      "SERVICE_REGION": "{{placement.region}}"
    {{/placement.region}}
  },
  "secrets": {
    {{#service.service_account_secret}}
      "serviceCredential": {
        "source": "{{service.service_account_secret}}"
      }
    {{/service.service_account_secret}}
  },
  "labels": {
    {{#networking.marathon_lb_proxy.enabled}}
    "HAPROXY_GROUP": "external",
    "HAPROXY_0_ENABLED": "true",
    "HAPROXY_0_REDIRECT_TO_HTTPS": "true",
    "HAPROXY_0_VHOST": "{{networking.marathon_lb_proxy.vhost}}",
    {{#networking.marathon_lb_proxy.path}}
    "HAPROXY_0_PATH": "{{networking.marathon_lb_proxy.path}}",
    {{/networking.marathon_lb_proxy.path}}
   "HAPROXY_0_BACKEND_HEAD": "backend {backend}\n  balance {balance}\n  mode {mode}\n  timeout server 30m\n  timeout client 30m\n",
    {{/networking.marathon_lb_proxy.enabled}}
    "DCOS_SERVICE_SCHEME": "http",
    "DCOS_SERVICE_NAME": "{{service.name}}",
    "DCOS_SERVICE_PORT_INDEX": "1"
  },
  "healthChecks": [
    {
      "protocol": "MESOS_HTTP",
  	  "ipProtocol": "IPv4",
      "portIndex": {{health_checks.HTTP_protocol.port_index}},
      "path": "/",
      "gracePeriodSeconds": {{health_checks.HTTP_protocol.advanced_health_checking_settings.grace_periods}},
      "intervalSeconds": {{health_checks.HTTP_protocol.advanced_health_checking_settings.intervals}},
      "timeoutSeconds": {{health_checks.HTTP_protocol.advanced_health_checking_settings.timeout}},
      "maxConsecutiveFailures": {{health_checks.HTTP_protocol.advanced_health_checking_settings.max_failures}},
      "delaySeconds": {{health_checks.HTTP_protocol.advanced_health_checking_settings.delay_seconds}}
  	}
  ],
  "fetch": [
  {{#fetch.artifact_URI.uri}}
  {
    "uri": "{{fetch.artifact_URI.uri}}",
    "extract": {{fetch.artifact_URI.extract}},
    "executable": {{fetch.artifact_URI.executable}},
    "cache": {{fetch.artifact_URI.cache}}
  }
  {{/fetch.artifact_URI.uri}}
  ],
  "requirePorts": true,
  "upgradeStrategy": {
    "maximumOverCapacity": 1 ,
    "minimumHealthCapacity": 1
  },
  "killSelection": "YOUNGEST_FIRST",
  "unreachableStrategy": {
    "inactiveAfterSeconds": 0,
    "expungeAfterSeconds": 0
  }
}
