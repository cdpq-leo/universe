{
  "id": "{{service.name}}",
  "instances": {{service.instances}},
  "cpus": {{service.cpus}},
  "mem": {{service.mem}},
  "disk": {{service.disk}},
  {{#service.cmd}}
  "cmd": "{{service.cmd}}",
  {{/service.cmd}}
  "backoffSeconds": {{service.back_off_seconds}},
  "backoffFactor": {{service.back_off_factor}},
  "maxLaunchDelaySeconds": {{service.max_launch_delay_seconds}},
  "networks": [
    {
      "mode": "container/bridge"
    }
  ],
  "acceptedResourceRoles": [
    "*"
  ],
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "{{resource.assets.container.docker.image}}",
      "forcePullImage": true,
      "privileged": false,
      "parameters": []
    },
    "volumes":
      [
      {{^volumes.volume_data.external_volume_name}}
    	{
    	  "containerPath": "data",
    	  "mode": "RW",
    	  "persistent": {
    		"type": "{{volumes.volume_data.type}}",
        {{^volumes.volume_data.profile}}
    		"profileName": "{{volumes.volume_data.profile}}",
        {{/volumes.volume_data.profile}}
    		"size": {{service.disk}},
    		"constraints": []
    	  }
    	},
      {
        "containerPath": "{{volumes.volume_data.container_path}}",
        "hostPath": "data",
        "mode": "RW"
      }
    	{{/volumes.volume_data.external_volume_name}}
    	{{#volumes.volume_data.external_volume_name}}
        {
            "containerPath": "{{volumes.volume_data.container_path}}",
            "external": {
              "name": "{{volumes.volume_data.external_volume_name}}",
              "provider": "dvdi",
              "options": { "dvdi/driver": "rexray" }
            },
            "mode": "RW"
        }
    	{{/volumes.volume_data.external_volume_name}}
      {{^volumes.volume_logs.external_volume_name}}
    	{
    	  "containerPath": "logs",
    	  "mode": "RW",
    	  "persistent": {
    		"type": "{{volumes.volume_logs.type}}",
        {{^volumes.volume_logs.profile}}
    		"profileName": "{{volumes.volume_logs.profile}}",
        {{/volumes.volume_logs.profile}}
    		"size": {{service.disk}},
    		"constraints": []
    	  }
    	},
      {
        "containerPath": "{{volumes.volume_logs.container_path}}",
        "hostPath": "logs",
        "mode": "RW"
      }
    	{{/volumes.volume_logs.external_volume_name}}
    	{{#volumes.volume_logs.external_volume_name}}
        {
            "containerPath": "{{volumes.volume_logs.container_path}}",
            "external": {
              "name": "{{volumes.volume_logs.external_volume_name}}",
              "provider": "dvdi",
              "options": { "dvdi/driver": "rexray" }
            },
            "mode": "RW"
        }
    	{{/volumes.volume_logs.external_volume_name}}
      ],
    "portMappings": [
      {
        {{#networking.service_endpoint.load_balance_port}}
        "labels": {
            "VIP_0": "/{{service.name}}:{{networking.service_endpoint.load_balance_port}}"
        },
        {{/networking.service_endpoint.load_balance_port}}
        "containerPort": {{networking.service_endpoint.container_port}},
        "hostPort": {{networking.service_endpoint.host_port}},
        {{#networking.service_endpoint.name}}
        "name": "{{networking.service_endpoint.name}}",
        {{/networking.service_endpoint.name}}
        "protocol": "{{networking.service_endpoint.protocol}}"
      }
    ]
  },
  "env": {
    {{#placement.region}}
      "SERVICE_REGION": "{{placement.region}}",
    {{/placement.region}}
    "MONGO_REPLSET": "{{environment.MONGO_REPLSET}}",
    "MONGO_INITDB_ROOT_USERNAME": {"secret": "mongodbuser"},
    "MONGO_INITDB_ROOT_PASSWORD": {"secret": "mongodbpassword"},
    "MONGO_STORAGE_PATH": "{{environment.MONGO_STORAGE_PATH}}",
    "MONGO_LOG_PATH": "{{environment.MONGO_LOG_PATH}}"
  },
  "secrets": {
     "mongodbuser": {
      "source": "{{environment.MONGO_INITDB_ROOT_USERNAME_SECRET}}"
     },
     "mongodbpassword": {
       "source": "{{environment.MONGO_INITDB_ROOT_PASSWORD_SECRET}}"
     }
  },
  "labels": {
    {{#networking.marathon_lb_proxy.enabled}}
    "HAPROXY_GROUP": "external",
    "HAPROXY_0_ENABLED": "true",
    "HAPROXY_0_REDIRECT_TO_HTTPS": "true",
    "HAPROXY_0_VHOST": "{{networking.marathon_lb_proxy.vhost}}",
    {{#networking.marathon_lb_proxy.path}}
    "HAPROXY_0_PATH": "{{networking.marathon_lb_proxy.path}}",
    {{/networking.marathon_lb_proxy.path}}
   "HAPROXY_0_BACKEND_HEAD": "backend {backend}\n  balance {balance}\n  mode {mode}\n  timeout server 30m\n  timeout client 30m\n",
    {{/networking.marathon_lb_proxy.enabled}}
    "DCOS_SERVICE_SCHEME": "http",
    "DCOS_SERVICE_NAME": "{{service.name}}",
    "DCOS_SERVICE_PORT_INDEX": "0"
  },
  "healthChecks": [
    {
      "gracePeriodSeconds": {{health_checks.TCP_protocol.advanced_health_checking_settings.grace_periods}},
      "intervalSeconds": {{health_checks.TCP_protocol.advanced_health_checking_settings.intervals}},
      "timeoutSeconds": {{health_checks.TCP_protocol.advanced_health_checking_settings.timeout}},
      "maxConsecutiveFailures": {{health_checks.TCP_protocol.advanced_health_checking_settings.max_failures}},
      "portIndex": {{health_checks.TCP_protocol.port_index}},
      "protocol": "TCP"
    }
  ],
  "fetch": [
  {{#fetch.artifact_URI.uri}}
  {
    "uri": "{{fetch.artifact_URI.uri}}",
    "extract": {{fetch.artifact_URI.extract}},
    "executable": {{fetch.artifact_URI.executable}},
    "cache": {{fetch.artifact_URI.cache}}
  }
  {{/fetch.artifact_URI.uri}}
  ],
  "requirePorts": false,
  "upgradeStrategy": {
    "maximumOverCapacity": 1 ,
    "minimumHealthCapacity": 1
  },
  "killSelection": "YOUNGEST_FIRST",
  "unreachableStrategy": {
    "inactiveAfterSeconds": 0 ,
    "expungeAfterSeconds": 0
  }
}
