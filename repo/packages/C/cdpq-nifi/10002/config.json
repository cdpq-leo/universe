{
    "type": "object",
    "properties": {
        "service": {
            "description": "Configuration properties for the NIFI service for DC/OS.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the service to display in the DC/OS dashboard.",
                    "type": "string",
                    "default": "nifi"
                },
                "cpus": {
                    "description": "CPU shares to allocate to each Nifi master.",
                    "type": "number",
                    "default": 1.0,
                    "minimum": 0.1
                },
                "mem": {
                    "description": "Memory (in MB) to allocate to each Nifi instance.",
                    "type": "number",
                    "default": 2048.0,
                    "minimum": 1024.0
                },
                "disk": {
                    "description": "Disk (MB) to allocate to the Nifi instance.",
                    "type": "number",
                    "default": 1000,
                    "minimum": 1000
                },
                "instances": {
                    "description": "Amount of nifi instances",
                    "type": "number",
                    "default": 1,
                    "minimum": 1
                },
                "max_launch_delay_seconds": {
                    "description": "Max launch delay seconds for the instance",
                    "type": "number",
                    "default": 3600
                }
            }
        },
        "placement": {
            "type": "object",
            "description": "Constraints control where apps run to allow optimizing for either fault tolerance (by spreading a task out on multiple nodes) or locality (by running all of an applications tasks on the same node).",
            "properties": {
                "constraints": {
                    "type": "string",
                    "description": "Constraints have three parts: a field name, an operator, and an optional parameter. The field can be the hostname of the agent node or any attribute of the agent node. Example: [[\"rack_id\", \"LIKE\", \"rack-foo-.*\"], [\"rack_id\", \"MAX_PER\", \"2\"]]",
                    "default": "[]",
                    "media": {
                        "type": "application/x-zone-constraints+json"
                    }
                },
                "region": {
                    "type": "string",
                    "description": "All application nodes will run in this region. When no region is specified the nodes are constrained to the local region. ",
                    "default": "",
                    "media": {
                        "type": "application/x-region+string"
                    }
                }
            }
        },
        "networking": {
            "type": "object",
            "description": "Configure the networking for your service.",
            "properties": {
                "service_endpoint_01": {
                    "type": "object",
                    "description": "DC/OS can automatically generate a Service Address to connect to each of your load balanced endpoints.",
                    "properties": {
                        "container_port": {
                            "description": "Container port number",
                            "type": "number",
                            "default": 8001
                        },
                        "protocol": {
                            "type": "string",
                            "description": "Protocol can be UDP, TCP or both. i.e. : \"udp\", \"tcp\", \"udp, tcp\". Most services will use TCP",
                            "default": "tcp"
                        },
                        "load_balance_port": {
                            "type": "number",
                            "description": "This port will be used to load balance this service address internally",
                            "default": 8001
                        }
                    }
                },
                "service_endpoint_02": {
                    "type": "object",
                    "description": "DC/OS can automatically generate a Service Address to connect to each of your load balanced endpoints.",
                    "properties": {
                        "container_port": {
                            "description": "Container port number",
                            "type": "number",
                            "default": 8002
                        },
                        "protocol": {
                            "type": "string",
                            "description": "Protocol can be UDP, TCP or both. i.e. : \"udp\", \"tcp\", \"udp, tcp\". Most services will use TCP",
                            "default": "tcp"
                        },
                        "load_balance_port": {
                            "type": "number",
                            "description": "This port will be used to load balance this service address internally",
                            "default": 8002
                        }
                    }
                },
                "service_endpoint_03": {
                    "type": "object",
                    "description": "DC/OS can automatically generate a Service Address to connect to each of your load balanced endpoints.",
                    "properties": {
                        "container_port": {
                            "description": "Container port number",
                            "type": "number",
                            "default": 12000
                        },
                        "protocol": {
                            "type": "string",
                            "description": "Protocol can be UDP, TCP or both. i.e. : \"udp\", \"tcp\", \"udp, tcp\". Most services will use TCP",
                            "default": "tcp"
                        },
                        "load_balance_port": {
                            "type": "number",
                            "description": "This port will be used to load balance this service address internally",
                            "default": 12000
                        }
                    }
                }
            }
        },
        "volumes": {
            "type": "object",
            "description": "Configure the volumes for your service.",
            "properties": {
                "azurefileshare_path": {
                    "description": "path on host to azurefileshare, will be mapped in the container to the same path",
                    "type": "string",
                    "default": ""
                },
                "persistent_volume_size": {
                    "description": "Disk (MB) to allocate to the persistent docker volume",
                    "type": "number",
                    "default": 5000
                }
            }
        },
        "environment": {
            "description": "NIFI settings which will be added to nifi.properties file.",
            "type": "object",
            "properties": {
                "zookeeper": {
                    "description": "The Connect String that is needed to connect to Apache ZooKeeper. This is a comma-separted list of hostname:port pairs.",
                    "type": "string",
                    "default": ""
                },
                "zookeeper_root": {
                    "description": "The root ZNode that should be used in ZooKeeper. ZooKeeper provides a directory-like structure for storing data. Each directory in this structure is referred to as a ZNode. This denotes the root ZNode, or directory, that should be used for storing data. The default value is /nifi. This is important to set correctly, as which cluster the NiFi instance attempts to join is determined by which ZooKeeper instance it connects to and the ZooKeeper Root Node that is specified.",
                    "type": "string",
                    "default": "/nifi"
                },
                "cluster": {
                    "description": "Set this to true if the instance is a node in a cluster. The default value is false.",
                    "type": "boolean",
                    "default": false
                },
                "cluster_node_protocol_port": {
                    "description": "Cluster node protocol port",
                    "type": "number",
                    "default": 12000
                },
                "cluster_node_protocol_threads": {
                    "description": "Cluster node protocol threads",
                    "type": "number",
                    "default": 10,
                    "minimum": 1
                },
                "cluster_node_protocol_max_threads": {
                    "description": "Cluster node protocol max threads",
                    "type": "number",
                    "default": 50
                },
                "web_http_port": {
                    "description": "HTTP port for the nifi web interface",
                    "type": "number",
                    "default": 8001
                },
                "election_max_wait": {
                    "description": "Maximum waiting time for election of a master node",
                    "type": "string",
                    "default": "1 min"
                },
                "election_max_candidates": {
                    "description": "Maximum amount of candidates for the electiono of a master node",
                    "type": "number",
                    "default": 1
                },
                "bootstrap_jvm_max": {
                    "description": "bootstrap JVM max (MB). 24Mb is allocated to nifi watchdog process.",
                    "type": "number",
                    "default": 2024
                },
                "bootstrap_jvm_min": {
                    "description": "bootstrap JVM min (MB). 24Mb is allocated to nifi watchdog process.",
                    "type": "number",
                    "default": 2024
                },
                "hdfs_config_url": {
                    "description": "HDFS endpoints url",
                    "type": "string",
                    "default": ""
                }
            }
        }
    }
}