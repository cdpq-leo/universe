{
   "id": "{{service.name}}",
   "cpus": {{service.cpus}},
   "mem": {{service.mem}},
   "disk":{{service.disk}},
   "instances": {{service.instances}},
   {{#service.cmd}}
   "cmd": "{{service.cmd}}",
   {{/service.cmd}}
   "fetch": [
      {{#fetch.artifact_URI.uri}}
    {
      "uri": "{{fetch.artifact_URI.uri}}",
      "extract": {{fetch.artifact_URI.extract}},
      "executable": {{fetch.artifact_URI.executable}},
      "cache": {{fetch.artifact_URI.cache}}
    }
      {{/fetch.artifact_URI.uri}}
   ],
   "container":{
      "type": "DOCKER",
      "docker":{
         "image":"{{resource.assets.container.docker.image}}",
         "forcePullImage":false,
         "privileged": false
      },
      "volumes": 
      [
         {{^volumes.volume_data.external_volume_name}}
         {
            "containerPath": "data",
            "mode": "RW",
            "persistent": {
                        "type": "{{volumes.volume_data.type}}",
                        "profileName": "{{volumes.volume_data.profile}}",
                        "size": "{{volumes.volume_data.size}}"
                        "constraints": []
            }
         },
         {
            "containerPath": "{{volumes.volume_data.container_path}}/data",
            "hostPath": "data",
            "mode": "RW"
         }
         {{/volumes.volume_data.external_volume_name}}
         {{#volumes.volume_data.external_volume_name}}
         {
            "containerPath": "{{volumes.volume_data.container_path}}/data",
            "external": {
                  "name": "{{volumes.volume_data.external_volume_name}}",
                  "provider": "dvdi",
                  "options": { "dvdi/driver": "rexray" }
            },
            "mode": "RW"
         }     
         {{/volumes.volume_data.external_volume_name}},
         {{^volumes.volume_log.external_volume_name}}
         {
            "containerPath": "log",
            "mode": "RW",
            "persistent": {
                       "type": "{{volumes.volume_log.type}}",
                       "profileName": "{{volumes.volume_log.profile}}",
                       "size": "{{volumes.volume_log.size}}"
                       "constraints": []
            }
         },
         {
            "containerPath": "{{volumes.volume_log.container_path}}/log",
            "hostPath": "log",
            "mode": "RW"
         }
         {{/volumes.volume_log.external_volume_name}}
         {{#volumes.volume_log.external_volume_name}}
         {
            "containerPath": "{{volumes.volume_log.container_path}}/log",
            "external": {
                  "name": "{{volumes.volume_log.external_volume_name}}",
                  "provider": "dvdi",
                  "options": { "dvdi/driver": "rexray" }
            },
            "mode": "RW"
         }
         {{/volumes.volume_log.external_volume_name}}
      ],
      "portMappings": 
      [
         {
           {{#networking.service_endpoints.load_balance_port}}
           "labels": {
               "VIP_0": "/{{service.name}}:{{networking.service_endpoints.load_balance_port}}"
           },
           {{/networking.service_endpoints.load_balance_port}}
           "containerPort": {{networking.service_endpoints.container_port}},
           "hostPort": {{networking.service_endpoints.host_port}},
           "protocol": "{{networking.service_endpoints.protocol}}"
         }
      ],
   },
   "networks":[
      {
         "mode":"container/bridge"
      }
   ],
   "healthChecks": 
   [
    { {{! command_protocol type}}
      "gracePeriodSeconds": {{health_checks.command_protocol.advanced_health_checking_settings.grace_periods}},
      "intervalSeconds": {{health_checks.command_protocol.advanced_health_checking_settings.intervals}},
      "timeoutSeconds": {{health_checks.command_protocol.advanced_health_checking_settings.timeout}},
      "maxConsecutiveFailures": {{health_checks.command_protocol.advanced_health_checking_settings.max_failures}},
      "delaySeconds": {{health_checks.command_protocol.advanced_health_checking_settings.delay_seconds}},
      "protocol": "COMMAND",
      "command": {
        "value": "{{health_checks.command_protocol.command}}"
      }
    },
    { {{! IP_protocol type}}
      "gracePeriodSeconds": {{health_checks.IP_protocol.advanced_health_checking_settings.grace_periods}},
      "intervalSeconds": {{health_checks.IP_protocol.advanced_health_checking_settings.intervals}},
      "timeoutSeconds": {{health_checks.IP_protocol.advanced_health_checking_settings.timeout}},
      "maxConsecutiveFailures": {{health_checks.IP_protocol.advanced_health_checking_settings.max_failures}},
      "delaySeconds": {{health_checks.IP_protocol.advanced_health_checking_settings.delay_seconds}},
      "portIndex": 0,
      "path": "{{health_checks.IP_protocol.path}}",
      "protocol": "{{health_checks.IP_protocol.protocol}}",
      "ipProtocol": "{{health_checks.IP_protocol.IPv4}}"
    }
   ],
   "labels":{
      {{! UPDATE this section if you added labels in the config.json file}}
      {{#networking.marathon_lb_proxy.enabled}}
      "HAPROXY_0_VHOST": "{{networking.marathon_lb_proxy.vhost}}",
      "HAPROXY_0_PATH": "{{networking.marathon_lb_proxy.path}}",
      {{/networking.marathon_lb_proxy.enabled}}
      "DCOS_SERVICE_SCHEME": "http",
      "DCOS_SERVICE_NAME": "{{service.name}}",
      "DCOS_SERVICE_PORT_INDEX": "0"
   },
   "env": {
      {{! UPDATE this section if you added environment variables in the config.json file}}
      {{#placement.region}}
      "SERVICE_REGION": "{{placement.region}}"
      {{/placement.region}}
  }
}